package com.mkisten.subscriptionbackend.service;

import com.mkisten.subscriptionbackend.entity.AuthSession;
import com.mkisten.subscriptionbackend.entity.User;
import com.mkisten.subscriptionbackend.entity.SubscriptionPlan;
import com.mkisten.subscriptionbackend.entity.Payment;
import com.mkisten.subscriptionbackend.event.PaymentNotificationEvent;
import com.mkisten.subscriptionbackend.event.PaymentProcessedEvent;
import com.mkisten.subscriptionbackend.repository.PaymentRepository;
import com.mkisten.subscriptionbackend.security.JwtUtil;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramBotService extends TelegramLongPollingBot {

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username:hhsubscription_bot}")
    private String botUsername;

    @Value("${admin.chat.id:6927880904}")
    private String adminChatId;

    private final UserService userService;
    private final TelegramAuthService telegramAuthService;
    private final AuthSessionService authSessionService;
    private final JwtUtil jwtUtil;
    private final PaymentRepository paymentRepository;
    private final ApplicationEventPublisher applicationEventPublisher;
    private final BotMessageService botMessageService;

    @Getter
    public enum SubscriptionPlanWithPrice {
        MONTHLY(299, "–ú–µ—Å—è—á–Ω–∞—è", 1),
        YEARLY(2990, "–ì–æ–¥–æ–≤–∞—è", 12),
        LIFETIME(9990, "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è", 999);

        private final double price;
        private final String description;
        private final int months;

        SubscriptionPlanWithPrice(double price, String description, int months) {
            this.price = price;
            this.description = description;
            this.months = months;
        }

        public SubscriptionPlan toSubscriptionPlan() {
            return SubscriptionPlan.valueOf(this.name());
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                handleMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                handleCallbackQuery(update.getCallbackQuery());
            }
        } catch (Exception e) {
            log.error("Error processing update", e);
        }
    }

    @EventListener
    public void handlePaymentNotificationEvent(PaymentNotificationEvent event) {
        try {
            notifyAdminAboutPaymentCheck(event.getPaymentId(), event.getTelegramId());
        } catch (Exception e) {
            log.error("Error handling payment notification event", e);
        }
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText();
        org.telegram.telegrambots.meta.api.objects.User telegramUser = message.getFrom();

        log.info("Received message from {}: {}", chatId, text);

        if (text.startsWith("/start")) {
            handleStartCommand(chatId, text, telegramUser);
        } else if (text.equals("/register")) {
            handleRegisterCommand(chatId, telegramUser);
        } else if (text.equals("/auth")) {
            handleAuthCommand(chatId, telegramUser);
        } else if (text.equals("/status")) {
            handleStatusCommand(chatId);
        } else if (text.equals("/help")) {
            handleHelpCommand(chatId);
        } else if (text.equals("/admin")) {
            handleAdminCommand(chatId);
        } else if (text.equals("/pay") || text.equals("/payment")) {
            handlePayCommand(chatId);
        } else if (text.equals("/my_payments") || text.equals("/payments")) {
            handleMyPaymentsCommand(chatId);
        } else if (text.startsWith("/verify")) {
            handleAdminVerifyCommand(chatId, text);
        } else if (text.startsWith("/reject")) {
            handleAdminRejectCommand(chatId, text);
        } else {
            handleUnknownCommand(chatId);
        }
    }

    private void handleAdminVerifyCommand(Long chatId, String text) {
        if (!isAdmin(chatId)) {
            sendTextMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            return;
        }

        try {
            // –§–æ—Ä–º–∞—Ç: /verify 123 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            String[] parts = text.split(" ", 3);
            if (parts.length < 2) {
                sendTextMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /verify <ID_–ø–ª–∞—Ç–µ–∂–∞> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]");
                return;
            }

            Long paymentId = Long.parseLong(parts[1]);
            String notes = parts.length > 2 ? parts[2] : null;

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendTextMessage(chatId,
                    "‚úÖ **–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n" +
                            "üÜî ID: " + paymentId + "\n" +
                            "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + (notes != null ? notes : "–Ω–µ —É–∫–∞–∑–∞–Ω") + "\n\n" +
                            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: POST /api/admin/payments/" + paymentId + "/verify");

        } catch (Exception e) {
            log.error("Error verifying payment via bot", e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void handleAdminRejectCommand(Long chatId, String text) {
        if (!isAdmin(chatId)) {
            sendTextMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
            return;
        }

        try {
            // –§–æ—Ä–º–∞—Ç: /reject 123 –ø—Ä–∏—á–∏–Ω–∞
            String[] parts = text.split(" ", 3);
            if (parts.length < 3) {
                sendTextMessage(chatId, "‚ùå –§–æ—Ä–º–∞—Ç: /reject <ID_–ø–ª–∞—Ç–µ–∂–∞> <–ø—Ä–∏—á–∏–Ω–∞>");
                return;
            }

            Long paymentId = Long.parseLong(parts[1]);
            String reason = parts[2];

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendTextMessage(chatId,
                    "‚ùå **–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞**\n\n" +
                            "üÜî ID: " + paymentId + "\n" +
                            "üìù –ü—Ä–∏—á–∏–Ω–∞: " + reason + "\n\n" +
                            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: POST /api/admin/payments/" + paymentId + "/reject");

        } catch (Exception e) {
            log.error("Error rejecting payment via bot", e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
    @EventListener
    public void handlePaymentProcessedEvent(PaymentProcessedEvent event) {
        try {
            Payment payment = event.getPayment();
            boolean approved = event.isApproved();
            String notes = event.getNotes();

            notifyUserAboutPaymentResult(payment, approved, notes);

        } catch (Exception e) {
            log.error("Error handling payment processed event", e);
        }
    }

    private void notifyUserAboutPaymentResult(Payment payment, boolean approved, String notes) {
        try {
            String message;
            if (approved) {
                message = "‚úÖ **–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!**\n\n" +
                        "üí∞ –°—É–º–º–∞: " + payment.getAmount() + " ‚ÇΩ\n" +
                        "üíé –¢–∞—Ä–∏—Ñ: " + payment.getPlan().getDescription() + "\n" +
                        "üìÖ –°—Ä–æ–∫: " + payment.getMonths() + " –º–µ—Å—è—Ü–µ–≤\n" +
                        "üÜî ID –ø–ª–∞—Ç–µ–∂–∞: `" + payment.getId() + "`\n\n";

                if (notes != null && !notes.trim().isEmpty()) {
                    message += "üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + notes + "\n\n";
                }

                message += "üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n" +
                        "üîê –í—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π `/auth`";

            } else {
                message = "‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω**\n\n" +
                        "üí∞ –°—É–º–º–∞: " + payment.getAmount() + " ‚ÇΩ\n" +
                        "üíé –¢–∞—Ä–∏—Ñ: " + payment.getPlan().getDescription() + "\n" +
                        "üÜî ID –ø–ª–∞—Ç–µ–∂–∞: `" + payment.getId() + "`\n\n" +
                        "üìù –ü—Ä–∏—á–∏–Ω–∞: " + notes + "\n\n" +
                        "‚ÑπÔ∏è –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª–∏, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n" +
                        "üí≥ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/pay`";
            }

            sendTextMessageToUser(payment.getTelegramId(), message);
            log.info("Payment result notification sent to user: {}", payment.getTelegramId());

        } catch (Exception e) {
            log.error("Error notifying user about payment result: {}", payment.getTelegramId(), e);
        }
    }

    private void handlePayCommand(Long chatId) {
        try {
            User user = userService.findByTelegramId(chatId);
            sendPlanSelection(chatId);
        } catch (Exception e) {
            sendTextMessage(chatId,
                    "‚ùå **–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è**\n\n" +
                            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ `/register` –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    }

    private void sendPlanSelection(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üíé **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n" +
                "–ü–ª–∞—Ç–µ–∂ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
        for (SubscriptionPlanWithPrice plan : SubscriptionPlanWithPrice.values()) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(plan.getDescription() + " - " + plan.getPrice() + " ‚ÇΩ");
            button.setCallbackData("pay_plan_" + plan.name());
            rows.add(Arrays.asList(button));
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("pay_cancel");
        rows.add(Arrays.asList(cancelButton));

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }


    private void sendPaymentInstructions(Long chatId, Long paymentId, SubscriptionPlanWithPrice plan) {
        String instructions = "üí≥ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:**\n\n" +
                "üì± **–ù–æ–º–µ—Ä –¢-–ë–∞–Ω–∫:** `+79779104605`\n" +
                "üíé **–¢–∞—Ä–∏—Ñ:** " + plan.getDescription() + "\n" +
                "üí∞ **–°—É–º–º–∞:** " + plan.getPrice() + " ‚ÇΩ\n" +
                "‚è∞ **ID –ø–ª–∞—Ç–µ–∂–∞:** `" + paymentId + "`\n\n" +
                "**–®–∞–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n" +
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ –¢-–ë–∞–Ω–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                "2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n" +
                "3. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: `+79779104605`\n" +
                "4. –°—É–º–º–∞: `" + plan.getPrice() + " ‚ÇΩ`\n" +
                "5. –£–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: `" + paymentId + "`\n\n" +
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂**";

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(instructions);

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton checkButton = new InlineKeyboardButton();
        checkButton.setText("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂");
        checkButton.setCallbackData("check_payment_" + paymentId);

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂");
        cancelButton.setCallbackData("cancel_payment_" + paymentId);

        rows.add(Arrays.asList(checkButton));
        rows.add(Arrays.asList(cancelButton));

        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }


    public void notifyAdminAboutPaymentCheck(Long paymentId, Long userId) {
        try {
            if (adminChatId == null || adminChatId.trim().isEmpty()) {
                log.warn("Admin chat ID not configured, skipping notification");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            Optional<Payment> paymentOpt = paymentRepository.findById(paymentId);
            if (paymentOpt.isEmpty()) {
                log.error("Payment not found for notification: {}", paymentId);
                return;
            }

            Payment payment = paymentOpt.get();
            User user = userService.findByTelegramId(userId);

            String adminMessage = "üîÑ **–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏**\n\n" +
                    "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** " + formatUserName(user) + "\n" +
                    "üì± **Telegram ID:** " + userId + "\n" +
                    "üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** `" + paymentId + "`\n" +
                    "üí∞ **–°—É–º–º–∞:** " + payment.getAmount() + " ‚ÇΩ\n" +
                    "üíé **–¢–∞—Ä–∏—Ñ:** " + payment.getPlan().getDescription() + "\n" +
                    "‚è∞ **–°–æ–∑–¥–∞–Ω:** " + payment.getCreatedAt() + "\n\n" +
                    "**–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**\n" +
                    "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: `/verify " + paymentId + " [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`\n" +
                    "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å: `/reject " + paymentId + " [–ø—Ä–∏—á–∏–Ω–∞]`\n\n" +
                    "–ò–ª–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.";

            sendTextMessage(Long.parseLong(adminChatId), adminMessage);

            log.info("Payment check requested - ID: {}, User: {}", paymentId, userId);

        } catch (Exception e) {
            log.error("Error notifying admin about payment check", e);
        }
    }

    // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    public void sendTextMessageToUser(Long telegramId, String text) {
        sendTextMessage(telegramId, text);
    }

    private void handlePaymentCancel(Long chatId, Long paymentId) {
        try {
            Optional<Payment> paymentOpt = paymentRepository.findById(paymentId);
            if (paymentOpt.isPresent()) {
                Payment payment = paymentOpt.get();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (!payment.getTelegramId().equals(chatId)) {
                    sendTextMessage(chatId, "‚ùå –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
                    return;
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                payment.setStatus(Payment.PaymentStatus.REJECTED);
                payment.setAdminNotes("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞");
                paymentRepository.save(payment);

                sendTextMessage(chatId,
                        "‚ùå **–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω**\n\n" +
                                "ID –ø–ª–∞—Ç–µ–∂–∞: `" + paymentId + "`\n" +
                                "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∫–æ–º–∞–Ω–¥–æ–π `/pay`");
            } else {
                sendTextMessage(chatId, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        } catch (Exception e) {
            log.error("Error canceling payment for user {}", chatId, e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞.");
        }
    }

    private void handleMyPaymentsCommand(Long chatId) {
        try {
            sendTextMessage(chatId,
                    "üìä **–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π**\n\n" +
                            "–§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PaymentService.\n\n" +
                            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/pay`");
        } catch (Exception e) {
            log.error("Error getting payment history for user {}", chatId, e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π.");
        }
    }

    private String getPaymentStatusText(Payment.PaymentStatus status) {
        switch (status) {
            case PENDING: return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã";
            case VERIFIED: return "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω";
            case REJECTED: return "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω";
            case EXPIRED: return "‚è∞ –ò—Å—Ç–µ–∫";
            default: return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        }
    }

    private void handleAuthCommand(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            User user = userService.findByTelegramId(chatId);

            log.info("Starting manual auth for user: {}", chatId);

            AuthSession authSession = authSessionService.createAuthSession("manual_auth");
            String jwtToken = jwtUtil.generateToken(user.getTelegramId());
            authSessionService.completeAuthSession(authSession.getSessionId(), chatId, jwtToken);

            sendTextMessage(chatId,
                    "üîê **–†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è**\n\n" +
                            "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n" +
                            "üì± **Session ID:** `" + authSession.getSessionId() + "`\n" +
                            "üìü **Device ID:** `manual_auth`\n" +
                            "üîë **Token:** `" + jwtToken + "`\n\n" +
                            "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** " + formatUserName(user) + "\n" +
                            "üíé **–¢–∞—Ä–∏—Ñ:** " + user.getSubscriptionPlan().getDescription() + "\n" +
                            "üìÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:** " + user.getSubscriptionEndDate() + "\n\n" +
                            "‚ö†Ô∏è *–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.*"
            );

            log.info("Manual auth completed for user: {}", chatId);

        } catch (Exception e) {
            log.warn("User not registered, cannot complete auth: {}", chatId);
            sendTextMessage(chatId,
                    "‚ùå **–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è**\n\n" +
                            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:\n\n" +
                            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/register` –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n" +
                            "2. –ü–æ–ª—É—á–∏—Ç–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n" +
                            "3. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/auth` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n" +
                            "–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
            );
        }
    }

    private void handleStartCommand(Long chatId, String text, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        String[] parts = text.split(" ");

        if (parts.length == 1) {
            sendWelcomeMessage(chatId);
        } else {
            String payload = parts[1];
            handleStartPayload(chatId, payload, telegramUser);
        }
    }

    private void handleStartPayload(Long chatId, String payload, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            if (payload.startsWith("auth_")) {
                handleAuthDeepLink(chatId, payload, telegramUser);
            } else if (payload.startsWith("reg_")) {
                completeRegistration(chatId, telegramUser);
            } else if (payload.startsWith("sub_")) {
                String[] parts = payload.split("_");
                if (parts.length >= 2) {
                    String plan = parts[1].toUpperCase();
                    activateSubscription(chatId, SubscriptionPlan.valueOf(plan));
                }
            } else {
                sendWelcomeMessage(chatId);
            }
        } catch (Exception e) {
            sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.");
            log.error("Error handling start payload: {}", payload, e);
        }
    }

    private void handleAuthDeepLink(Long chatId, String payload, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            log.info("Processing auth deep link - Payload: {}, Chat: {}", payload, chatId);

            if (!payload.startsWith("auth_")) {
                sendTextMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
                return;
            }

            String params = payload.substring(5);
            String sessionId;
            String deviceId = "unknown";

            int lastUnderscore = params.lastIndexOf('_');
            if (lastUnderscore != -1) {
                sessionId = params.substring(0, lastUnderscore);
                deviceId = params.substring(lastUnderscore + 1);
            } else {
                sessionId = params;
                deviceId = "telegram_bot";
            }

            log.info("Parsed - Session: {}, Device: {}, Chat: {}", sessionId, deviceId, chatId);

            Optional<AuthSession> existingSession = authSessionService.findBySessionId(sessionId);
            if (existingSession.isEmpty()) {
                sendTextMessage(chatId, "‚ùå –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.");
                return;
            }

            AuthSession session = existingSession.get();
            String actualDeviceId = "unknown".equals(deviceId) ? session.getDeviceId() : deviceId;

            if (session.getStatus() != AuthSession.AuthStatus.PENDING) {
                sendTextMessage(chatId, "‚ùå –°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                return;
            }

            try {
                User user = userService.findByTelegramId(chatId);
                log.info("User found, proceeding with auth: {}", chatId);
                handleExistingUserAuth(chatId, user, sessionId, actualDeviceId);

            } catch (Exception e) {
                log.info("User not registered, offering registration: {}", chatId);
                sendRegistrationOfferWithAuth(chatId, sessionId, actualDeviceId, telegramUser);
            }

        } catch (Exception e) {
            log.error("Auth deep link error for user {}", chatId, e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
        }
    }

    private void handleExistingUserAuth(Long chatId, User user, String sessionId, String deviceId) {
        try {
            boolean isSubscriptionActive = telegramAuthService.isSubscriptionActive(user);

            if (!isSubscriptionActive) {
                sendTextMessage(chatId,
                        "‚ùå **–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞**\n\n" +
                                "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ " + user.getSubscriptionEndDate() + "\n\n" +
                                "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/pay`"
                );
                log.warn("Subscription not active for user: {}", chatId);
                return;
            }

            String jwtToken = jwtUtil.generateToken(user.getTelegramId());
            log.info("Generated JWT token for user: {}, session: {}", chatId, sessionId);

            AuthSession completedSession = authSessionService.completeAuthSession(sessionId, chatId, jwtToken);

            if (completedSession == null || completedSession.getStatus() != AuthSession.AuthStatus.COMPLETED) {
                sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
                log.error("Failed to complete auth session: {}", sessionId);
                return;
            }

            sendTextMessage(chatId,
                    "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n" +
                            "üë§ **–ò–º—è:** " + formatUserName(user) + "\n" +
                            "üíé **–¢–∞—Ä–∏—Ñ:** " + user.getSubscriptionPlan().getDescription() + "\n" +
                            "üìÖ **–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:** " + user.getSubscriptionEndDate() + "\n" +
                            "‚è± **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** " + telegramAuthService.getDaysRemaining(user) + "\n\n" +
                            "üîê **–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.**\n" +
                            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            );

            log.info("User authenticated via deep link: {}, session: {}", chatId, sessionId);

        } catch (Exception e) {
            log.error("Error in handleExistingUserAuth for user: {}, session: {}", chatId, sessionId, e);
            sendTextMessage(chatId, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
        }
    }

    private void sendRegistrationOfferWithAuth(Long chatId, String sessionId, String deviceId, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            String safeDeviceId = deviceId.replace("_", "-");

            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText("üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n" +
                    "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n\n" +
                    "‚úÖ **–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n" +
                    "‚Ä¢ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n" +
                    "‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n" +
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏");

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            InlineKeyboardButton registerButton = new InlineKeyboardButton();
            registerButton.setText("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
            registerButton.setCallbackData("register_auth_" + sessionId + "_" + safeDeviceId);

            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(registerButton);
            rows.add(row1);
            keyboard.setKeyboard(rows);
            message.setReplyMarkup(keyboard);

            executeMessage(message);

            log.info("Registration offer sent with auth - Session: {}, Device: {}, Chat: {}", sessionId, deviceId, chatId);

        } catch (Exception e) {
            log.error("Error sending registration offer: {}", e.getMessage());
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    }

    private void handleRegisterCommand(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            User existingUser = userService.findByTelegramId(chatId);
            sendSubscriptionInfo(chatId, existingUser);
        } catch (Exception e) {
            sendRegistrationOffer(chatId);
        }
    }

    private void sendRegistrationOffer(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–æ–∫!**\n\n" +
                "–ü–æ–ª—É—á–∏—Ç–µ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:");

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        InlineKeyboardButton registerButton = new InlineKeyboardButton();
        registerButton.setText("üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
        registerButton.setCallbackData("register_confirm");

        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∞");
        cancelButton.setCallbackData("register_cancel");

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(registerButton);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(cancelButton);

        rows.add(row1);
        rows.add(row2);
        keyboard.setKeyboard(rows);
        message.setReplyMarkup(keyboard);

        executeMessage(message);
    }

    private void completeRegistration(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            User user = createUser(chatId, telegramUser);
            userService.save(user);

            sendTextMessage(chatId,
                    "üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n" +
                            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ\n\n" +
                            "üìÖ **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ:** " + user.getSubscriptionEndDate() + "\n" +
                            "‚è± **–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:** 7\n" +
                            "üíé **–¢–∞—Ä–∏—Ñ:** " + user.getSubscriptionPlan().getDescription() + "\n\n" +
                            "üîê **–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:**\n" +
                            "‚Ä¢ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'\n" +
                            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/auth` –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
            );

            log.info("User registered successfully: {}", chatId);

        } catch (Exception e) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
            log.error("Registration error for user {}", chatId, e);
        }
    }

    private void completeRegistrationWithAuth(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser, String sessionId, String deviceId) {
        try {
            log.info("Starting registration with auth - Session: {}, Device: {}, Chat: {}", sessionId, deviceId, chatId);

            User user = createUser(chatId, telegramUser);
            userService.save(user);

            String jwtToken = jwtUtil.generateToken(user.getTelegramId());
            AuthSession completedSession = authSessionService.completeAuthSession(sessionId, deviceId, chatId, jwtToken);

            sendTextMessage(chatId,
                    "üéâ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!**\n\n" +
                            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n" +
                            "üìÖ **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** 7 –¥–Ω–µ–π\n" +
                            "üíé **–¢–∞—Ä–∏—Ñ:** " + user.getSubscriptionPlan().getDescription() + "\n\n" +
                            "üîê **–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.**\n" +
                            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            );

            log.info("User registered and authenticated: {}, session: {}", chatId, sessionId);

        } catch (Exception e) {
            log.error("Registration error for user {}: {}", chatId, e.getMessage(), e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    private User createUser(Long chatId, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        User user = new User();
        user.setTelegramId(chatId);
        user.setFirstName(telegramUser.getFirstName());
        user.setLastName(telegramUser.getLastName());
        user.setUsername(telegramUser.getUserName());
        user.setSubscriptionPlan(SubscriptionPlan.TRIAL);
        user.setTrialUsed(true);
        user.setSubscriptionEndDate(LocalDate.now().plusDays(7));
        user.setCreatedAt(LocalDateTime.now());
        user.setLastLoginAt(LocalDateTime.now());
        return user;
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        try {
            if (data.startsWith("register_auth_")) {
                // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
            } else if (data.equals("register_confirm")) {
                completeRegistration(chatId, callbackQuery.getFrom());
            } else if (data.equals("register_cancel")) {
                editMessageText(chatId, messageId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ `/register` –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ.");
            } else if (data.startsWith("pay_plan_")) {
                String planName = data.substring("pay_plan_".length());
                handlePaymentPlanSelection(chatId, planName, callbackQuery.getFrom());
            } else if (data.startsWith("check_payment_")) {
                Long paymentId = Long.parseLong(data.substring("check_payment_".length()));
                handlePaymentCheck(chatId, paymentId);
            } else if (data.startsWith("cancel_payment_")) {
                Long paymentId = Long.parseLong(data.substring("cancel_payment_".length()));
                handlePaymentCancel(chatId, paymentId);
            } else if (data.equals("pay_cancel")) {
                editMessageText(chatId, messageId, "‚ùå –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–º–µ–Ω–µ–Ω.");
            }

            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            executeMethod(answer);

        } catch (Exception e) {
            log.error("Error handling callback", e);
        }
    }

    public AuthSessionService.AuthStatusResponse checkAuthStatus(String sessionId, String deviceId) {
        return authSessionService.checkAuthStatus(sessionId, deviceId);
    }

    public Map<String, Object> getDebugInfo() {
        return authSessionService.getDebugInfo();
    }

    public String generateAuthDeepLink(String sessionId, String deviceId) {
        if (deviceId == null || deviceId.isEmpty() || "unknown".equals(deviceId)) {
            return "https://t.me/" + botUsername + "?start=auth_" + sessionId;
        } else {
            String safeDeviceId = deviceId.replace("_", "-");
            return "https://t.me/" + botUsername + "?start=auth_" + sessionId + "_" + safeDeviceId;
        }
    }

    private void handleStatusCommand(Long chatId) {
        try {
            User user = userService.findByTelegramId(chatId);
            sendSubscriptionInfo(chatId, user);
        } catch (Exception e) {
            sendTextMessage(chatId,
                    "‚ùå **–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã**\n\n" +
                            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n" +
                            "`/register` - –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n" +
                            "`/help` - –ø–æ–º–æ—â—å"
            );
        }
    }

    private void sendSubscriptionInfo(Long chatId, User user) {
        boolean isActive = telegramAuthService.isSubscriptionActive(user);
        int daysRemaining = telegramAuthService.getDaysRemaining(user);

        String status = isActive ? "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" : "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞";
        String daysText = isActive ? "‚è± –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: " + daysRemaining : "‚è± –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞";

        String message = "üìä **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:**\n\n" +
                "üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** " + formatUserName(user) + "\n" +
                "üìÖ **–û–∫–æ–Ω—á–∞–Ω–∏–µ:** " + user.getSubscriptionEndDate() + "\n" +
                daysText + "\n" +
                "üíé **–°—Ç–∞—Ç—É—Å:** " + status + "\n" +
                "üè∑ **–¢–∞—Ä–∏—Ñ:** " + user.getSubscriptionPlan().getDescription() + "\n\n" +
                "üí≥ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/pay`";

        sendTextMessage(chatId, message);
    }

    private String formatUserName(User user) {
        if (user.getFirstName() != null && user.getLastName() != null) {
            return user.getFirstName() + " " + user.getLastName();
        } else if (user.getFirstName() != null) {
            return user.getFirstName();
        } else if (user.getUsername() != null) {
            return "@" + user.getUsername();
        } else {
            return "ID: " + user.getTelegramId();
        }
    }

    private void handleHelpCommand(Long chatId) {
        String helpText = "‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**\n\n" +
                "`/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                "`/register` - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ\n" +
                "`/auth` - —Ä—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n" +
                "`/pay` - –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
                "`/my_payments` - –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π\n" +
                "`/status` - —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n" +
                "`/help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
                "üí≥ **–û–ø–ª–∞—Ç–∞:** —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫ –ø–æ –Ω–æ–º–µ—Ä—É +79779104605\n" +
                "üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** contact@yourdomain.com";

        sendTextMessage(chatId, helpText);
    }

    public AuthSession createAuthSession(String deviceId) {
        return authSessionService.createAuthSession(deviceId);
    }

    private void handleAdminCommand(Long chatId) {
        try {
            if (isAdmin(chatId)) {
                sendAdminPanel(chatId);
            } else {
                sendTextMessage(chatId, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.");
            }
        } catch (Exception e) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞.");
        }
    }

    private boolean isAdmin(Long chatId) {
        return adminChatId != null && !adminChatId.isEmpty() && adminChatId.equals(chatId.toString());
    }

    private void sendAdminPanel(Long chatId) {
        try {
            long totalUsers = userService.getAllUsers().size();
            long activeSubscriptions = userService.getActiveSubscriptions().size();
            long expiredSubscriptions = userService.getExpiredSubscriptions().size();

            String stats = "üëë **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n" +
                    "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n" +
                    "‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + totalUsers + "\n" +
                    "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: " + activeSubscriptions + "\n" +
                    "‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: " + expiredSubscriptions + "\n\n" +
                    "üí≥ **–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:**\n" +
                    "‚úÖ `/verify <ID> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]` - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n" +
                    "‚ùå `/reject <ID> <–ø—Ä–∏—á–∏–Ω–∞>` - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂\n\n" +
                    "üåê **API endpoints:**\n" +
                    "GET /api/admin/payments/pending\n" +
                    "POST /api/admin/payments/{id}/verify\n" +
                    "POST /api/admin/payments/{id}/reject";

            sendTextMessage(chatId, stats);
        } catch (Exception e) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
        }
    }

    private void handleUnknownCommand(Long chatId) {
        sendTextMessage(chatId,
                "ü§î **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n" +
                        "`/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" +
                        "`/help` - –ø–æ–º–æ—â—å"
        );
    }

    private void sendWelcomeMessage(Long chatId) {
        String welcomeText = "üëã **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.**\n\n" +
                "–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n" +
                "‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ\n" +
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n" +
                "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π\n" +
                "‚Ä¢ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫\n" +
                "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\n" +
                "**–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:**\n" +
                "`/register` - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n" +
                "`/pay` - –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n" +
                "`/auth` - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n" +
                "`/help` - –ø–æ–º–æ—â—å";

        sendTextMessage(chatId, welcomeText);
    }

    private void activateSubscription(Long chatId, SubscriptionPlan plan) {
        try {
            User user = userService.findByTelegramId(chatId);
            userService.extendSubscription(chatId, plan.getDays(), plan);
            sendTextMessage(chatId, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: " + plan.getDescription());
        } catch (Exception e) {
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.");
        }
    }

    private void sendTextMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setParseMode("Markdown");

        // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        botMessageService.logMessage(chatId, "TEXT", text, "OUT");

        executeMessage(message);
    }

    private void editMessageText(Long chatId, Integer messageId, String text) {
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId.toString());
        message.setMessageId(messageId);
        message.setText(text);
        message.setParseMode("Markdown");
        executeMethod(message);
    }

    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("Error sending message", e);
        }
    }

    private void executeMethod(org.telegram.telegrambots.meta.api.methods.BotApiMethod<?> method) {
        try {
            execute(method);
        } catch (TelegramApiException e) {
            log.error("Error executing method", e);
        }
    }

    public String generateRegistrationLink() {
        return "https://t.me/" + botUsername + "?start=reg_" + System.currentTimeMillis();
    }

    public String generateSubscriptionLink(SubscriptionPlan plan) {
        return "https://t.me/" + botUsername + "?start=sub_" + plan.name().toLowerCase();
    }
    private void handlePaymentPlanSelection(Long chatId, String planName, org.telegram.telegrambots.meta.api.objects.User telegramUser) {
        try {
            SubscriptionPlanWithPrice plan = SubscriptionPlanWithPrice.valueOf(planName);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User user = userService.findByTelegramId(chatId);

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é
            Payment payment = new Payment(chatId, plan.getPrice(), plan.toSubscriptionPlan(), plan.getMonths());
            Payment savedPayment = paymentRepository.save(payment);

            sendPaymentInstructions(chatId, savedPayment.getId(), plan);

        } catch (Exception e) {
            log.error("Error creating payment for user {}", chatId, e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage());
        }
    }

    private void handlePaymentCheck(Long chatId, Long paymentId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            Optional<Payment> paymentOpt = paymentRepository.findById(paymentId);
            if (paymentOpt.isEmpty()) {
                sendTextMessage(chatId, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }

            Payment payment = paymentOpt.get();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (!payment.getTelegramId().equals(chatId)) {
                sendTextMessage(chatId, "‚ùå –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if (payment.getStatus() != Payment.PaymentStatus.PENDING) {
                sendTextMessage(chatId,
                        "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: " + getPaymentStatusText(payment.getStatus()) + "\n" +
                                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: " + (payment.getAdminNotes() != null ? payment.getAdminNotes() : "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                );
                return;
            }

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
            applicationEventPublisher.publishEvent(new PaymentNotificationEvent(this, paymentId, chatId));

            sendTextMessage(chatId,
                    "‚úÖ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É**\n\n" +
                            "ID –ø–ª–∞—Ç–µ–∂–∞: `" + paymentId + "`\n" +
                            "üí∞ –°—É–º–º–∞: " + payment.getAmount() + " ‚ÇΩ\n" +
                            "üíé –¢–∞—Ä–∏—Ñ: " + payment.getPlan().getDescription() + "\n" +
                            "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n" +
                            "–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n\n" +
                            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
            );

        } catch (Exception e) {
            log.error("Error checking payment for user {}", chatId, e);
            sendTextMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.");
        }
    }

}